#print pyramid plot to png
#png(filename = paste("D:/Ixodes_scapularis_research_2019/bad_breakup_tick_algorithms/B Burgdorferi % in deer tick adults in ", i, ", NY ",Sys.Date(),".png", sep = ''), width = 876, height = 604)
#print(pyramid_plot(tick_pathogen, title=paste("B. Burgdorferi % in deer tick adults in ", i, ", NY", sep = ''), plot_insig = TRUE, significance=0.05, rsq_points =TRUE, caption_plot = paste("Stability Time:", st)))
#dev.off()
}
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
sink()
county_adult_tick_data_results <- data.frame(counties.with.10.years.data, stability.time, absolute.range.min.value, absolute.range.max.value, relative.range.min.value, relative.range.max.value, proportion.significant, proportion.wrong)
write.csv(county_adult_tick_data_results, file = paste("D:/Ixodes_scapularis_research_2019/bad_breakup_tick_algorithms/ny_county_adult_tick_pathogen_presence_data_results_",Sys.Date(),".csv",sep = ""))
#-------------------------------------------------#
#Tick nymph density
#read in tick nymph data
tick_nymphs_data <- read.csv("D:/Ixodes_scapularis_research_2019/bad_breakup_tick_algorithms/data/Deer_Tick_Surveillance__Nymphs__May_to_Sept__excluding_Powassan_virus__Beginning_2008.csv", head = T)
#create vector of counties in NY state in the dataset
counties <- unique(tick_nymphs_data$County)
counties <- na.omit(counties)
counties <- as.character(counties)
#set up vectors to collect results of stability time, absolute range, relative range
#run on nymph deer tick data for each county with at least 10 years data
counties.with.10.years.data = c()
stability.time = c()
absolute.range.min.value = c()
absolute.range.max.value = c()
relative.range.min.value = c()
relative.range.max.value = c()
proportion.significant = c()
proportion.wrong = c()
sink(paste("ny_county_nymph_tick_data_results",Sys.Date()))
for (i in counties) {
tryCatch({
#location: i
county <- tick_nymphs_data[tick_nymphs_data$County == i,]
#get only year and ticks found column
tick_nymphs <- county[,c("Year", "Tick.Population.Density")]
#omit nas
tick_nymphs <- na.omit(tick_nymphs)
#data now cleaned
#if number of years in location exceeds 9 run functions
if(nrow(tick_nymphs) >= 10) {
#i returns county name
print(i)
counties.with.10.years.data <- c(counties.with.10.years.data, i)
#iterates through our targetted windows and returns summary statistics
print("Multiple Breakups")
print(multiple_breakups(tick_nymphs))
#returns how many years it takes to reach stability
print("Stability Time")
st <- stability_time(tick_nymphs)
print(st)
stability.time <- c(stability.time, st)
#abs_range returns the absolute range of significant findings
print("Absolute Range")
ar <- abs_range(tick_nymphs, only_significant = FALSE, significance = 0.05)
print(ar)
absolute.range.min.value <- c(absolute.range.min.value, ar[1])
absolute.range.max.value <- c(absolute.range.max.value, ar[2])
#relative_range returns the absolute over and under estimate compared to the slope of the longest series
print("Relative Range")
rr <- relative_range(tick_nymphs, only_significant = FALSE, significance = 0.05)
print(rr)
relative.range.min.value <- c(relative.range.min.value, rr[1])
relative.range.max.value <- c(relative.range.max.value, rr[2])
#returns the proportion of total windows with statistically significant values
print("Proportion Significant")
ps <- proportion_significant(tick_nymphs, significance = 0.05)
print(ps)
proportion.significant <- c(proportion.significant, ps)
#returns proportion of significant relationships that does not match the direction of the true slope
print("Proportion Significantly Wrong")
psw <- proportion_wrong(tick_nymphs, significance = 0.05)
print(psw)
proportion.wrong <- c(proportion.wrong, psw)
#print pyramid plot to png
#png(filename = paste("D:/Ixodes_scapularis_research_2019/bad_breakup_tick_algorithms/nymph deer tick density in ", i, ", NY ",Sys.Date(),".png", sep = ''), width = 876, height = 604)
#print(pyramid_plot(tick_nymphs, title=paste("Nymph deer tick density in ", i, ", NY", sep = ''), plot_insig = TRUE, significance=0.05, rsq_points =TRUE, caption_plot = paste("Stability Time:", st)))
#dev.off()
}
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
sink()
county_nymph_tick_data_results <- data.frame(counties.with.10.years.data, stability.time, absolute.range.min.value, absolute.range.max.value, relative.range.min.value, relative.range.max.value, proportion.significant, proportion.wrong)
write.csv(county_nymph_tick_data_results, file = paste("D:/Ixodes_scapularis_research_2019/bad_breakup_tick_algorithms/ny_county_nymph_tick_data_results_",Sys.Date(),".csv",sep = ""))
#-------------------------------------------------#
#Tick nymph pathogen presence
#read in tick nymph data
tick_nymphs_data <- read.csv("D:/Ixodes_scapularis_research_2019/bad_breakup_tick_algorithms/data/Deer_Tick_Surveillance__Nymphs__May_to_Sept__excluding_Powassan_virus__Beginning_2008.csv", head = T)
#create vector of counties in NY state in the dataset
counties <- unique(tick_nymphs_data$County)
counties <- na.omit(counties)
counties <- as.character(counties)
#set up vectors to collect results of stability time, absolute range, relative range
#run on nymph deer tick data for each county with at least 10 years data
counties.with.10.years.data = c()
stability.time = c()
absolute.range.min.value = c()
absolute.range.max.value = c()
relative.range.min.value = c()
relative.range.max.value = c()
proportion.significant = c()
proportion.wrong = c()
sink(paste("ny_county_nymph_tick_pathogen_presence_data_results",Sys.Date()))
for (i in counties) {
tryCatch({
#location: i
county <- tick_nymphs_data[tick_nymphs_data$County == i,]
#get only year and ticks found column
tick_pathogen <- county[,c("Year", "B..burgdorferi....")]
#omit nas
tick_pathogen <- na.omit(tick_pathogen)
#data now cleaned
#if number of years in location exceeds 9 run functions
if(nrow(tick_pathogen) >= 10) {
#i returns county name
print(i)
counties.with.10.years.data <- c(counties.with.10.years.data, i)
#iterates through our targetted windows and returns summary statistics
print("Multiple Breakups")
print(multiple_breakups(tick_pathogen))
#returns how many years it takes to reach stability
print("Stability Time")
st <- stability_time(tick_pathogen)
print(st)
stability.time <- c(stability.time, st)
#abs_range returns the absolute range of significant findings
print("Absolute Range")
ar <- abs_range(tick_pathogen, only_significant = FALSE, significance = 0.05)
print(ar)
absolute.range.min.value <- c(absolute.range.min.value, ar[1])
absolute.range.max.value <- c(absolute.range.max.value, ar[2])
#relative_range returns the absolute over and under estimate compared to the slope of the longest series
print("Relative Range")
rr <- relative_range(tick_pathogen, only_significant = FALSE, significance = 0.05)
print(rr)
relative.range.min.value <- c(relative.range.min.value, rr[1])
relative.range.max.value <- c(relative.range.max.value, rr[2])
#returns the proportion of total windows with statistically significant values
print("Proportion Significant")
ps <- proportion_significant(tick_pathogen, significance = 0.05)
print(ps)
proportion.significant <- c(proportion.significant, ps)
#returns proportion of significant relationships that does not match the direction of the true slope
print("Proportion Significantly Wrong")
psw <- proportion_wrong(tick_pathogen, significance = 0.05)
print(psw)
proportion.wrong <- c(proportion.wrong, psw)
#print pyramid plot to png
#png(filename = paste("D:/Ixodes_scapularis_research_2019/bad_breakup_tick_algorithms/B Burgdorferi % in deer tick nymphs in ", i, ", NY ",Sys.Date(),".png", sep = ''), width = 876, height = 604)
#print(pyramid_plot(tick_pathogen, title=paste("B. Burgdorferi % in deer tick nymphs in ", i, ", NY", sep = ''), plot_insig = TRUE, significance=0.05, rsq_points =TRUE, caption_plot = paste("Stability Time:", st)))
#dev.off()
}
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
sink()
county_nymph_tick_data_results <- data.frame(counties.with.10.years.data, stability.time, absolute.range.min.value, absolute.range.max.value, relative.range.min.value, relative.range.max.value, proportion.significant, proportion.wrong)
write.csv(county_nymph_tick_data_results, file = paste("D:/Ixodes_scapularis_research_2019/bad_breakup_tick_algorithms/ny_county_nymph_tick_pathogen_presence_data_results_",Sys.Date(),".csv",sep = ""))
#-----------------------------------------------------------------------------------------------#
sink(paste("harvard_forest_deer_tick_bad_breakup_results",Sys.Date(),".txt", sep = ""))
#Sept 17 2019
# Cleaning up and modeling ticka found on people data from an oppurtunistic study in Harvard forest from here:
# https://portal.lternet.edu/nis/mapbrowse?packageid=knb-lter-hfr.299.2
# then running bad breakup, absolute range, relative range, stabilitiy time on it
##########################################
print("Deer ticks found on people in Harvard forest")
#now run bad breakup, stabiliity time, relative range, absolute range for all locations
#read in survey data from Harvard forest
tick_data <- read.csv("D:/Ixodes_scapularis_research_2019/bad_breakup_tick_algorithms/data/harvard_forest/harvard_forest/hf299-01-survey.csv", head = T)
#create vector of locations in Harvard forest sampled
locations <- unique(tick_data$location.name)
locations <- na.omit(locations)
locations <- as.character(locations)
for (i in locations) {
tryCatch({
#location: i
tick_loc <- tick_data[tick_data$location.name == i,]
#look at deer ticks *found*
#get only year and ticks found column
ticks_found <- tick_loc[,c("year", "deer.found")]
#omit nas
ticks_found <- na.omit(ticks_found)
#aggregate all counts per year in single row
frame=data.frame(ticks_found)
ticks_found <- aggregate(frame['deer.found'], by=frame['year'], sum)
#data now cleaned
#if number of years in location exceeds 9 run bad breakup algorithm
if(nrow(ticks_found) >= 10) {
print(i)
#Multiple breakups
print("Multiple Breakups")
print(multiple_breakups(ticks_found))
#Stability
print("Stability Time")
print(stability_time(ticks_found))
#Absolute range
print("Absolute Range")
print(abs_range(ticks_found, only_significant = FALSE, significance = 0.05))
#Relative Range
print("Relative Range")
print(relative_range(ticks_found, only_significant = FALSE, significance = 0.05))
#Proportion Significant
print("Proportion Significant")
print(proportion_significant(ticks_found, significance = 0.05))
#Proportion Significantly Wrong
print("Proportion Significantly Wrong")
print(proportion_wrong(ticks_found, significance = 0.05))
#print pyramid plot
png(filename = paste("D:/Ixodes_scapularis_research_2019/bad_breakup_tick_algorithms/Deer tick found in ", i, ", Harvard Forest ", Sys.Date(),".png", sep = ''), width = 876, height = 604)
print(pyramid_plot(ticks_found, title=paste("Deer ticks found in ", i, ", Harvard Forest", sep = ''), plot_insig = TRUE, significance=0.05, rsq_points =TRUE))
dev.off()
}
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
##########################################
#now run the aggregated count in Harvard forest as a whole for deer ticks found on people
print("Harvard Forest/n")
#read in survey data from Harvard forest
tick_data <- read.csv("D:/Ixodes_scapularis_research_2019/bad_breakup_tick_algorithms/data/harvard_forest/harvard_forest/hf299-01-survey.csv", head = T)
#location: Harvard forest
tick_loc <- tick_data
#look at deer ticks *found*
#get only year and ticks found column
ticks_found <- tick_loc[,c("year", "deer.found")]
#omit nas
ticks_found <- na.omit(ticks_found)
#aggregate all counts per year in single row
frame=data.frame(ticks_found)
ticks_found <- aggregate(frame['deer.found'], by=frame['year'], sum)
#data now cleaned for Simes Tract
#Multiple breakups
print("Multiple Breakups")
print(multiple_breakups(ticks_found))
#Stability
print("Stability")
print(stability_time(ticks_found))
#Absolute range
print("Absolute Range")
print(abs_range(ticks_found, only_significant = FALSE, significance = 0.05))
print("Relative Range")
print(relative_range(ticks_found, only_significant = FALSE, significance = 0.05))
print("Proportion Significant")
print(proportion_significant(ticks_found, significance = 0.05))
print("Proportion Significantly Wrong")
print(proportion_wrong(ticks_found, significance = 0.05))
png(filename = paste("D:/Ixodes_scapularis_research_2019/bad_breakup_tick_algorithms/Deer ticks found in Harvard Forest ", Sys.Date(),".png", sep = ''), width = 876, height = 604)
pyramid_plot(ticks_found, title="Deer ticks found in Harvard Forest", plot_insig = TRUE, significance=0.05, rsq_points =TRUE)
dev.off()
#-----------------------------------------------------------------------------------------------#
#Oct 1 2019
# Cleaning up and modeling tick bite data from an oppurtunistic study in Harvard forest from here:
# https://portal.lternet.edu/nis/mapbrowse?packageid=knb-lter-hfr.299.2
# then running bad breakup, absolute range, relative range, stabilitiy time on it
print("Deer tick bites on people in Harvard forest")
##########################################
#now run bad breakup, stabiliity time, relative range, absolute range for all locations
#read in survey data from Harvard forest
tick_data <- read.csv("D:/Ixodes_scapularis_research_2019/bad_breakup_tick_algorithms/data/harvard_forest/harvard_forest/hf299-01-survey.csv", head = T)
#create vector of locations in Harvard forest sampled
locations <- unique(tick_data$location.name)
locations <- na.omit(locations)
locations <- as.character(locations)
for (i in locations) {
tryCatch({
#location: i
tick_loc <- tick_data[tick_data$location.name == i,]
#look at deer ticks *found*
#get only year and ticks found column
tick_bites <- tick_loc[,c("year", "deer.bite")]
#omit nas
tick_bites <- na.omit(tick_bites)
#aggregate all counts per year in single row
frame=data.frame(tick_bites)
tick_bites <- aggregate(frame['deer.bite'], by=frame['year'], sum)
#data now cleaned
#if number of years in location exceeds 9 run bad breakup algorithm
if(nrow(tick_bites) >= 10) {
print(i)
#Multiple breakups
print("Multiple Breakups")
multiple_breakups(tick_bites)
#Stability
print("Stability Time")
print(stability_time(tick_bites))
#Absolute range
print("Absolute Range")
print(abs_range(tick_bites, only_significant = FALSE, significance = 0.05))
print("Relative Range")
print(relative_range(tick_bites, only_significant = FALSE, significance = 0.05))
print("Proportion Significant")
print(proportion_significant(ticks_found, significance = 0.05))
print("Proportion Significantly Wrong")
print(proportion_wrong(ticks_found, significance = 0.05))
#print pyramid plot
png(filename = paste("D:/Ixodes_scapularis_research_2019/bad_breakup_tick_algorithms/Deer tick bites in ", i, ", Harvard Forest ", Sys.Date(),".png", sep = ''), width = 876, height = 604)
print(pyramid_plot(tick_bites, title=paste("Deer tick bites in ", i, ", Harvard Forest", sep = ''), plot_insig = TRUE, significance=0.05, rsq_points =TRUE))
dev.off()
}
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
##########################################
#now run the aggregated count in Harvard forest as a whole for deer tick bites on people
print("Harvard Forest/n")
#read in survey data from Harvard forest
tick_data <- read.csv("D:/Ixodes_scapularis_research_2019\bad_breakup_tick_algorithms/data/harvard_forest/harvard_forest/hf299-01-survey.csv", head = T)
#location: Harvard forest
tick_loc <- tick_data
#look at deer ticks *found*
#get only year and ticks found column
tick_bites <- tick_loc[,c("year", "deer.bite")]
#omit nas
tick_bites <- na.omit(tick_bites)
#aggregate all counts per year in single row
frame=data.frame(tick_bites)
tick_bites <- aggregate(frame['deer.bite'], by=frame['year'], sum)
#Multiple breakups
print("Multiple Breakups")
print(multiple_breakups(tick_bites))
#Stability
print("Stability Time")
print(stability_time(tick_bites))
#Absolute range
print("Absolute Range")
print(abs_range(tick_bites, only_significant = FALSE, significance = 0.5))
#successful
print("Relative Range")
print(relative_range(tick_bites, only_significant = FALSE, significance = 0.05))
print("Proportion Significant")
print(proportion_significant(ticks_found, significance = 0.05))
print("Proportion Significantly Wrong")
print(proportion_wrong(ticks_found, significance = 0.05))
png(filename = paste("D:/Ixodes_scapularis_research_2019/bad_breakup_tick_algorithms/Deer tick bites in Harvard Forest ", Sys.Date(),".png", sep = ''), width = 876, height = 604)
pyramid_plot(tick_bites, title="Deer tick bites in Harvard Forest", plot_insig = TRUE, significance=0.05, rsq_points =TRUE)
dev.off()
sink()
tick_data <- read.csv("D:/Ixodes_scapularis_research_2019/bad_breakup_tick_algorithms/data/harvard_forest/harvard_forest/hf299-01-survey.csv", head = T)
tick_data <- read.csv("D:/Ixodes_scapularis_research_2019/bad_breakup_tick_algorithms/data/harvard_forest/hf299-01-survey.csv", head = T)
#-----------------------------------------------------------------------------------------------#
sink(paste("harvard_forest_deer_tick_bad_breakup_results",Sys.Date(),".txt", sep = ""))
#Sept 17 2019
# Cleaning up and modeling ticka found on people data from an oppurtunistic study in Harvard forest from here:
# https://portal.lternet.edu/nis/mapbrowse?packageid=knb-lter-hfr.299.2
# then running bad breakup, absolute range, relative range, stabilitiy time on it
##########################################
print("Deer ticks found on people in Harvard forest")
#now run bad breakup, stabiliity time, relative range, absolute range for all locations
#read in survey data from Harvard forest
tick_data <- read.csv("D:/Ixodes_scapularis_research_2019/bad_breakup_tick_algorithms/data/harvard_forest/hf299-01-survey.csv", head = T)
#create vector of locations in Harvard forest sampled
locations <- unique(tick_data$location.name)
locations <- na.omit(locations)
locations <- as.character(locations)
for (i in locations) {
tryCatch({
#location: i
tick_loc <- tick_data[tick_data$location.name == i,]
#look at deer ticks *found*
#get only year and ticks found column
ticks_found <- tick_loc[,c("year", "deer.found")]
#omit nas
ticks_found <- na.omit(ticks_found)
#aggregate all counts per year in single row
frame=data.frame(ticks_found)
ticks_found <- aggregate(frame['deer.found'], by=frame['year'], sum)
#data now cleaned
#if number of years in location exceeds 9 run bad breakup algorithm
if(nrow(ticks_found) >= 10) {
print(i)
#Multiple breakups
print("Multiple Breakups")
print(multiple_breakups(ticks_found))
#Stability
print("Stability Time")
print(stability_time(ticks_found))
#Absolute range
print("Absolute Range")
print(abs_range(ticks_found, only_significant = FALSE, significance = 0.05))
#Relative Range
print("Relative Range")
print(relative_range(ticks_found, only_significant = FALSE, significance = 0.05))
#Proportion Significant
print("Proportion Significant")
print(proportion_significant(ticks_found, significance = 0.05))
#Proportion Significantly Wrong
print("Proportion Significantly Wrong")
print(proportion_wrong(ticks_found, significance = 0.05))
#print pyramid plot
png(filename = paste("D:/Ixodes_scapularis_research_2019/bad_breakup_tick_algorithms/Deer tick found in ", i, ", Harvard Forest ", Sys.Date(),".png", sep = ''), width = 876, height = 604)
print(pyramid_plot(ticks_found, title=paste("Deer ticks found in ", i, ", Harvard Forest", sep = ''), plot_insig = TRUE, significance=0.05, rsq_points =TRUE))
dev.off()
}
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
##########################################
#now run the aggregated count in Harvard forest as a whole for deer ticks found on people
print("Harvard Forest/n")
#read in survey data from Harvard forest
tick_data <- read.csv("D:/Ixodes_scapularis_research_2019/bad_breakup_tick_algorithms/data/harvard_forest/harvard_forest/hf299-01-survey.csv", head = T)
#location: Harvard forest
tick_loc <- tick_data
#look at deer ticks *found*
#get only year and ticks found column
ticks_found <- tick_loc[,c("year", "deer.found")]
#omit nas
ticks_found <- na.omit(ticks_found)
#aggregate all counts per year in single row
frame=data.frame(ticks_found)
ticks_found <- aggregate(frame['deer.found'], by=frame['year'], sum)
#data now cleaned for Simes Tract
#Multiple breakups
print("Multiple Breakups")
print(multiple_breakups(ticks_found))
#Stability
print("Stability")
print(stability_time(ticks_found))
#Absolute range
print("Absolute Range")
print(abs_range(ticks_found, only_significant = FALSE, significance = 0.05))
print("Relative Range")
print(relative_range(ticks_found, only_significant = FALSE, significance = 0.05))
print("Proportion Significant")
print(proportion_significant(ticks_found, significance = 0.05))
print("Proportion Significantly Wrong")
print(proportion_wrong(ticks_found, significance = 0.05))
png(filename = paste("D:/Ixodes_scapularis_research_2019/bad_breakup_tick_algorithms/Deer ticks found in Harvard Forest ", Sys.Date(),".png", sep = ''), width = 876, height = 604)
pyramid_plot(ticks_found, title="Deer ticks found in Harvard Forest", plot_insig = TRUE, significance=0.05, rsq_points =TRUE)
dev.off()
#-----------------------------------------------------------------------------------------------#
#Oct 1 2019
# Cleaning up and modeling tick bite data from an oppurtunistic study in Harvard forest from here:
# https://portal.lternet.edu/nis/mapbrowse?packageid=knb-lter-hfr.299.2
# then running bad breakup, absolute range, relative range, stabilitiy time on it
print("Deer tick bites on people in Harvard forest")
##########################################
#now run bad breakup, stabiliity time, relative range, absolute range for all locations
#read in survey data from Harvard forest
tick_data <- read.csv("D:/Ixodes_scapularis_research_2019/bad_breakup_tick_algorithms/data/harvard_forest/harvard_forest/hf299-01-survey.csv", head = T)
#create vector of locations in Harvard forest sampled
locations <- unique(tick_data$location.name)
locations <- na.omit(locations)
locations <- as.character(locations)
for (i in locations) {
tryCatch({
#location: i
tick_loc <- tick_data[tick_data$location.name == i,]
#look at deer ticks *found*
#get only year and ticks found column
tick_bites <- tick_loc[,c("year", "deer.bite")]
#omit nas
tick_bites <- na.omit(tick_bites)
#aggregate all counts per year in single row
frame=data.frame(tick_bites)
tick_bites <- aggregate(frame['deer.bite'], by=frame['year'], sum)
#data now cleaned
#if number of years in location exceeds 9 run bad breakup algorithm
if(nrow(tick_bites) >= 10) {
print(i)
#Multiple breakups
print("Multiple Breakups")
multiple_breakups(tick_bites)
#Stability
print("Stability Time")
print(stability_time(tick_bites))
#Absolute range
print("Absolute Range")
print(abs_range(tick_bites, only_significant = FALSE, significance = 0.05))
print("Relative Range")
print(relative_range(tick_bites, only_significant = FALSE, significance = 0.05))
print("Proportion Significant")
print(proportion_significant(ticks_found, significance = 0.05))
print("Proportion Significantly Wrong")
print(proportion_wrong(ticks_found, significance = 0.05))
#print pyramid plot
png(filename = paste("D:/Ixodes_scapularis_research_2019/bad_breakup_tick_algorithms/Deer tick bites in ", i, ", Harvard Forest ", Sys.Date(),".png", sep = ''), width = 876, height = 604)
print(pyramid_plot(tick_bites, title=paste("Deer tick bites in ", i, ", Harvard Forest", sep = ''), plot_insig = TRUE, significance=0.05, rsq_points =TRUE))
dev.off()
}
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
##########################################
#now run the aggregated count in Harvard forest as a whole for deer tick bites on people
print("Harvard Forest/n")
#read in survey data from Harvard forest
tick_data <- read.csv("D:/Ixodes_scapularis_research_2019/bad_breakup_tick_algorithms/data/harvard_forest/harvard_forest/hf299-01-survey.csv", head = T)
#location: Harvard forest
tick_loc <- tick_data
#look at deer ticks *found*
#get only year and ticks found column
tick_bites <- tick_loc[,c("year", "deer.bite")]
#omit nas
tick_bites <- na.omit(tick_bites)
#aggregate all counts per year in single row
frame=data.frame(tick_bites)
tick_bites <- aggregate(frame['deer.bite'], by=frame['year'], sum)
#Multiple breakups
print("Multiple Breakups")
print(multiple_breakups(tick_bites))
#Stability
print("Stability Time")
print(stability_time(tick_bites))
#Absolute range
print("Absolute Range")
print(abs_range(tick_bites, only_significant = FALSE, significance = 0.5))
#successful
print("Relative Range")
print(relative_range(tick_bites, only_significant = FALSE, significance = 0.05))
print("Proportion Significant")
print(proportion_significant(ticks_found, significance = 0.05))
print("Proportion Significantly Wrong")
print(proportion_wrong(ticks_found, significance = 0.05))
png(filename = paste("D:/Ixodes_scapularis_research_2019/bad_breakup_tick_algorithms/Deer tick bites in Harvard Forest ", Sys.Date(),".png", sep = ''), width = 876, height = 604)
pyramid_plot(tick_bites, title="Deer tick bites in Harvard Forest", plot_insig = TRUE, significance=0.05, rsq_points =TRUE)
dev.off()
sink()
